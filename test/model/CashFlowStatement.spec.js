/*
 * Stocks
 * <h3>Authentication</h3>                     You need to authenticate to use this API.                     To authenticate click on the \"Authorize\" button and do one of the following steps.<br />                     1. Send your API key in the headers of the request by typing \"Bearer my-key\" on the Bearer authorization scheme.<br />                     2. Send your API key on the \"ApiKey\" query string parameter. To do this type your API key in the Query String authorization scheme.<br />                     Both methods are equally valid. We offer both options so that you can use the method that is easier to use in your application.<br />                     <br />                     <h3>API limits</h3>                     Your API key may be subject to daily/hourly limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)                       2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <h3>Suggestions</h3>                     You don't need to implement the whole API by hand in your programming language of choice.<br />                     Since this API has an OpenAPI specification you can use                      <a href=\"https://github.com/swagger-api/swagger-codegen\" target=\"_blank\">Swagger Generator</a>                      to automatically generate client stubs for more than 30 programming languages.                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>
 *
 * OpenAPI spec version: v1
 * Contact: equibles@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.32
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EquiblesCryptos);
  }
}(this, function(expect, EquiblesCryptos) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('CashFlowStatement', function() {
      beforeEach(function() {
        instance = new EquiblesCryptos.CashFlowStatement();
      });

      it('should create an instance of CashFlowStatement', function() {
        // TODO: update the code to test CashFlowStatement
        expect(instance).to.be.a(EquiblesCryptos.CashFlowStatement);
      });

      it('should have the property operatingCashFlow (base name: "operatingCashFlow")', function() {
        // TODO: update the code to test the property operatingCashFlow
        expect(instance).to.have.property('operatingCashFlow');
        // expect(instance.operatingCashFlow).to.be(expectedValueLiteral);
      });

      it('should have the property paymentsForOperatingActivities (base name: "paymentsForOperatingActivities")', function() {
        // TODO: update the code to test the property paymentsForOperatingActivities
        expect(instance).to.have.property('paymentsForOperatingActivities');
        // expect(instance.paymentsForOperatingActivities).to.be(expectedValueLiteral);
      });

      it('should have the property proceedsFromOperatingActivities (base name: "proceedsFromOperatingActivities")', function() {
        // TODO: update the code to test the property proceedsFromOperatingActivities
        expect(instance).to.have.property('proceedsFromOperatingActivities');
        // expect(instance.proceedsFromOperatingActivities).to.be(expectedValueLiteral);
      });

      it('should have the property changeInOperatingLiabilities (base name: "changeInOperatingLiabilities")', function() {
        // TODO: update the code to test the property changeInOperatingLiabilities
        expect(instance).to.have.property('changeInOperatingLiabilities');
        // expect(instance.changeInOperatingLiabilities).to.be(expectedValueLiteral);
      });

      it('should have the property changeInOperatingAssets (base name: "changeInOperatingAssets")', function() {
        // TODO: update the code to test the property changeInOperatingAssets
        expect(instance).to.have.property('changeInOperatingAssets');
        // expect(instance.changeInOperatingAssets).to.be(expectedValueLiteral);
      });

      it('should have the property depreciationDepletionAndAmortization (base name: "depreciationDepletionAndAmortization")', function() {
        // TODO: update the code to test the property depreciationDepletionAndAmortization
        expect(instance).to.have.property('depreciationDepletionAndAmortization');
        // expect(instance.depreciationDepletionAndAmortization).to.be(expectedValueLiteral);
      });

      it('should have the property capitalExpenditures (base name: "capitalExpenditures")', function() {
        // TODO: update the code to test the property capitalExpenditures
        expect(instance).to.have.property('capitalExpenditures');
        // expect(instance.capitalExpenditures).to.be(expectedValueLiteral);
      });

      it('should have the property changeInReceivables (base name: "changeInReceivables")', function() {
        // TODO: update the code to test the property changeInReceivables
        expect(instance).to.have.property('changeInReceivables');
        // expect(instance.changeInReceivables).to.be(expectedValueLiteral);
      });

      it('should have the property changeInInventory (base name: "changeInInventory")', function() {
        // TODO: update the code to test the property changeInInventory
        expect(instance).to.have.property('changeInInventory');
        // expect(instance.changeInInventory).to.be(expectedValueLiteral);
      });

      it('should have the property profitLoss (base name: "profitLoss")', function() {
        // TODO: update the code to test the property profitLoss
        expect(instance).to.have.property('profitLoss');
        // expect(instance.profitLoss).to.be(expectedValueLiteral);
      });

      it('should have the property investments (base name: "investments")', function() {
        // TODO: update the code to test the property investments
        expect(instance).to.have.property('investments');
        // expect(instance.investments).to.be(expectedValueLiteral);
      });

      it('should have the property cashFlowFromInvestment (base name: "cashFlowFromInvestment")', function() {
        // TODO: update the code to test the property cashFlowFromInvestment
        expect(instance).to.have.property('cashFlowFromInvestment');
        // expect(instance.cashFlowFromInvestment).to.be(expectedValueLiteral);
      });

      it('should have the property cashFlowFromFinancing (base name: "cashFlowFromFinancing")', function() {
        // TODO: update the code to test the property cashFlowFromFinancing
        expect(instance).to.have.property('cashFlowFromFinancing');
        // expect(instance.cashFlowFromFinancing).to.be(expectedValueLiteral);
      });

      it('should have the property proceedsFromRepaymentsOfShortTermDebt (base name: "proceedsFromRepaymentsOfShortTermDebt")', function() {
        // TODO: update the code to test the property proceedsFromRepaymentsOfShortTermDebt
        expect(instance).to.have.property('proceedsFromRepaymentsOfShortTermDebt');
        // expect(instance.proceedsFromRepaymentsOfShortTermDebt).to.be(expectedValueLiteral);
      });

      it('should have the property paymentsForRepurchaseOfCommonStock (base name: "paymentsForRepurchaseOfCommonStock")', function() {
        // TODO: update the code to test the property paymentsForRepurchaseOfCommonStock
        expect(instance).to.have.property('paymentsForRepurchaseOfCommonStock');
        // expect(instance.paymentsForRepurchaseOfCommonStock).to.be(expectedValueLiteral);
      });

      it('should have the property paymentsForRepurchaseOfEquity (base name: "paymentsForRepurchaseOfEquity")', function() {
        // TODO: update the code to test the property paymentsForRepurchaseOfEquity
        expect(instance).to.have.property('paymentsForRepurchaseOfEquity');
        // expect(instance.paymentsForRepurchaseOfEquity).to.be(expectedValueLiteral);
      });

      it('should have the property paymentsForRepurchaseOfPreferredStock (base name: "paymentsForRepurchaseOfPreferredStock")', function() {
        // TODO: update the code to test the property paymentsForRepurchaseOfPreferredStock
        expect(instance).to.have.property('paymentsForRepurchaseOfPreferredStock');
        // expect(instance.paymentsForRepurchaseOfPreferredStock).to.be(expectedValueLiteral);
      });

      it('should have the property dividendPayout (base name: "dividendPayout")', function() {
        // TODO: update the code to test the property dividendPayout
        expect(instance).to.have.property('dividendPayout');
        // expect(instance.dividendPayout).to.be(expectedValueLiteral);
      });

      it('should have the property dividendPayoutCommonStock (base name: "dividendPayoutCommonStock")', function() {
        // TODO: update the code to test the property dividendPayoutCommonStock
        expect(instance).to.have.property('dividendPayoutCommonStock');
        // expect(instance.dividendPayoutCommonStock).to.be(expectedValueLiteral);
      });

      it('should have the property dividendPayoutPreferredStock (base name: "dividendPayoutPreferredStock")', function() {
        // TODO: update the code to test the property dividendPayoutPreferredStock
        expect(instance).to.have.property('dividendPayoutPreferredStock');
        // expect(instance.dividendPayoutPreferredStock).to.be(expectedValueLiteral);
      });

      it('should have the property proceedsFromIssuanceOfCommonStock (base name: "proceedsFromIssuanceOfCommonStock")', function() {
        // TODO: update the code to test the property proceedsFromIssuanceOfCommonStock
        expect(instance).to.have.property('proceedsFromIssuanceOfCommonStock');
        // expect(instance.proceedsFromIssuanceOfCommonStock).to.be(expectedValueLiteral);
      });

      it('should have the property proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet (base name: "proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet")', function() {
        // TODO: update the code to test the property proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet
        expect(instance).to.have.property('proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet');
        // expect(instance.proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet).to.be(expectedValueLiteral);
      });

      it('should have the property proceedsFromIssuanceOfPreferredStock (base name: "proceedsFromIssuanceOfPreferredStock")', function() {
        // TODO: update the code to test the property proceedsFromIssuanceOfPreferredStock
        expect(instance).to.have.property('proceedsFromIssuanceOfPreferredStock');
        // expect(instance.proceedsFromIssuanceOfPreferredStock).to.be(expectedValueLiteral);
      });

      it('should have the property proceedsFromRepurchaseOfEquity (base name: "proceedsFromRepurchaseOfEquity")', function() {
        // TODO: update the code to test the property proceedsFromRepurchaseOfEquity
        expect(instance).to.have.property('proceedsFromRepurchaseOfEquity');
        // expect(instance.proceedsFromRepurchaseOfEquity).to.be(expectedValueLiteral);
      });

      it('should have the property proceedsFromSaleOfTreasuryStock (base name: "proceedsFromSaleOfTreasuryStock")', function() {
        // TODO: update the code to test the property proceedsFromSaleOfTreasuryStock
        expect(instance).to.have.property('proceedsFromSaleOfTreasuryStock');
        // expect(instance.proceedsFromSaleOfTreasuryStock).to.be(expectedValueLiteral);
      });

      it('should have the property changeInCashAndCashEquivalents (base name: "changeInCashAndCashEquivalents")', function() {
        // TODO: update the code to test the property changeInCashAndCashEquivalents
        expect(instance).to.have.property('changeInCashAndCashEquivalents');
        // expect(instance.changeInCashAndCashEquivalents).to.be(expectedValueLiteral);
      });

      it('should have the property changeInExchangeRate (base name: "changeInExchangeRate")', function() {
        // TODO: update the code to test the property changeInExchangeRate
        expect(instance).to.have.property('changeInExchangeRate');
        // expect(instance.changeInExchangeRate).to.be(expectedValueLiteral);
      });

      it('should have the property netIncome (base name: "netIncome")', function() {
        // TODO: update the code to test the property netIncome
        expect(instance).to.have.property('netIncome');
        // expect(instance.netIncome).to.be(expectedValueLiteral);
      });

      it('should have the property netBorrowings (base name: "netBorrowings")', function() {
        // TODO: update the code to test the property netBorrowings
        expect(instance).to.have.property('netBorrowings');
        // expect(instance.netBorrowings).to.be(expectedValueLiteral);
      });

      it('should have the property changeInWorkingCapital (base name: "changeInWorkingCapital")', function() {
        // TODO: update the code to test the property changeInWorkingCapital
        expect(instance).to.have.property('changeInWorkingCapital');
        // expect(instance.changeInWorkingCapital).to.be(expectedValueLiteral);
      });

      it('should have the property otherNonCashItems (base name: "otherNonCashItems")', function() {
        // TODO: update the code to test the property otherNonCashItems
        expect(instance).to.have.property('otherNonCashItems');
        // expect(instance.otherNonCashItems).to.be(expectedValueLiteral);
      });

      it('should have the property freeCashFlow (base name: "freeCashFlow")', function() {
        // TODO: update the code to test the property freeCashFlow
        expect(instance).to.have.property('freeCashFlow');
        // expect(instance.freeCashFlow).to.be(expectedValueLiteral);
      });

    });
  });

}));
