/*
 * Stocks
 * <h3>Authentication</h3>                     You need to authenticate to use this API.                     To authenticate click on the \"Authorize\" button and do one of the following steps.<br />                     1. Send your API key in the headers of the request by typing \"Bearer my-key\" on the Bearer authorization scheme.<br />                     2. Send your API key on the \"ApiKey\" query string parameter. To do this type your API key in the Query String authorization scheme.<br />                     Both methods are equally valid. We offer both options so that you can use the method that is easier to use in your application.<br />                     <br />                     <h3>API limits</h3>                     Your API key may be subject to daily/hourly limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)                       2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <h3>Suggestions</h3>                     You don't need to implement the whole API by hand in your programming language of choice.<br />                     Since this API has an OpenAPI specification you can use                      <a href=\"https://github.com/swagger-api/swagger-codegen\" target=\"_blank\">Swagger Generator</a>                      to automatically generate client stubs for more than 30 programming languages.                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>
 *
 * OpenAPI spec version: v1
 * Contact: equibles@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.32
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EquiblesCryptos);
  }
}(this, function(expect, EquiblesCryptos) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('IncomeStatement', function() {
      beforeEach(function() {
        instance = new EquiblesCryptos.IncomeStatement();
      });

      it('should create an instance of IncomeStatement', function() {
        // TODO: update the code to test IncomeStatement
        expect(instance).to.be.a(EquiblesCryptos.IncomeStatement);
      });

      it('should have the property grossProfit (base name: "grossProfit")', function() {
        // TODO: update the code to test the property grossProfit
        expect(instance).to.have.property('grossProfit');
        // expect(instance.grossProfit).to.be(expectedValueLiteral);
      });

      it('should have the property revenue (base name: "revenue")', function() {
        // TODO: update the code to test the property revenue
        expect(instance).to.have.property('revenue');
        // expect(instance.revenue).to.be(expectedValueLiteral);
      });

      it('should have the property costOfRevenue (base name: "costOfRevenue")', function() {
        // TODO: update the code to test the property costOfRevenue
        expect(instance).to.have.property('costOfRevenue');
        // expect(instance.costOfRevenue).to.be(expectedValueLiteral);
      });

      it('should have the property costOfGoodsAndServicesSold (base name: "costOfGoodsAndServicesSold")', function() {
        // TODO: update the code to test the property costOfGoodsAndServicesSold
        expect(instance).to.have.property('costOfGoodsAndServicesSold');
        // expect(instance.costOfGoodsAndServicesSold).to.be(expectedValueLiteral);
      });

      it('should have the property operatingIncome (base name: "operatingIncome")', function() {
        // TODO: update the code to test the property operatingIncome
        expect(instance).to.have.property('operatingIncome');
        // expect(instance.operatingIncome).to.be(expectedValueLiteral);
      });

      it('should have the property sellingGeneralAndAdministrative (base name: "sellingGeneralAndAdministrative")', function() {
        // TODO: update the code to test the property sellingGeneralAndAdministrative
        expect(instance).to.have.property('sellingGeneralAndAdministrative');
        // expect(instance.sellingGeneralAndAdministrative).to.be(expectedValueLiteral);
      });

      it('should have the property researchAndDevelopment (base name: "researchAndDevelopment")', function() {
        // TODO: update the code to test the property researchAndDevelopment
        expect(instance).to.have.property('researchAndDevelopment');
        // expect(instance.researchAndDevelopment).to.be(expectedValueLiteral);
      });

      it('should have the property operatingExpenses (base name: "operatingExpenses")', function() {
        // TODO: update the code to test the property operatingExpenses
        expect(instance).to.have.property('operatingExpenses');
        // expect(instance.operatingExpenses).to.be(expectedValueLiteral);
      });

      it('should have the property investmentIncomeNet (base name: "investmentIncomeNet")', function() {
        // TODO: update the code to test the property investmentIncomeNet
        expect(instance).to.have.property('investmentIncomeNet');
        // expect(instance.investmentIncomeNet).to.be(expectedValueLiteral);
      });

      it('should have the property netInterestIncome (base name: "netInterestIncome")', function() {
        // TODO: update the code to test the property netInterestIncome
        expect(instance).to.have.property('netInterestIncome');
        // expect(instance.netInterestIncome).to.be(expectedValueLiteral);
      });

      it('should have the property interestIncome (base name: "interestIncome")', function() {
        // TODO: update the code to test the property interestIncome
        expect(instance).to.have.property('interestIncome');
        // expect(instance.interestIncome).to.be(expectedValueLiteral);
      });

      it('should have the property interestExpense (base name: "interestExpense")', function() {
        // TODO: update the code to test the property interestExpense
        expect(instance).to.have.property('interestExpense');
        // expect(instance.interestExpense).to.be(expectedValueLiteral);
      });

      it('should have the property nonInterestIncome (base name: "nonInterestIncome")', function() {
        // TODO: update the code to test the property nonInterestIncome
        expect(instance).to.have.property('nonInterestIncome');
        // expect(instance.nonInterestIncome).to.be(expectedValueLiteral);
      });

      it('should have the property otherNonOperatingIncome (base name: "otherNonOperatingIncome")', function() {
        // TODO: update the code to test the property otherNonOperatingIncome
        expect(instance).to.have.property('otherNonOperatingIncome');
        // expect(instance.otherNonOperatingIncome).to.be(expectedValueLiteral);
      });

      it('should have the property depreciation (base name: "depreciation")', function() {
        // TODO: update the code to test the property depreciation
        expect(instance).to.have.property('depreciation');
        // expect(instance.depreciation).to.be(expectedValueLiteral);
      });

      it('should have the property depreciationAndAmortization (base name: "depreciationAndAmortization")', function() {
        // TODO: update the code to test the property depreciationAndAmortization
        expect(instance).to.have.property('depreciationAndAmortization');
        // expect(instance.depreciationAndAmortization).to.be(expectedValueLiteral);
      });

      it('should have the property incomeBeforeTax (base name: "incomeBeforeTax")', function() {
        // TODO: update the code to test the property incomeBeforeTax
        expect(instance).to.have.property('incomeBeforeTax');
        // expect(instance.incomeBeforeTax).to.be(expectedValueLiteral);
      });

      it('should have the property incomeTaxExpense (base name: "incomeTaxExpense")', function() {
        // TODO: update the code to test the property incomeTaxExpense
        expect(instance).to.have.property('incomeTaxExpense');
        // expect(instance.incomeTaxExpense).to.be(expectedValueLiteral);
      });

      it('should have the property interestAndDebtExpense (base name: "interestAndDebtExpense")', function() {
        // TODO: update the code to test the property interestAndDebtExpense
        expect(instance).to.have.property('interestAndDebtExpense');
        // expect(instance.interestAndDebtExpense).to.be(expectedValueLiteral);
      });

      it('should have the property netIncomeFromContinuingOperations (base name: "netIncomeFromContinuingOperations")', function() {
        // TODO: update the code to test the property netIncomeFromContinuingOperations
        expect(instance).to.have.property('netIncomeFromContinuingOperations');
        // expect(instance.netIncomeFromContinuingOperations).to.be(expectedValueLiteral);
      });

      it('should have the property comprehensiveIncomeNetOfTax (base name: "comprehensiveIncomeNetOfTax")', function() {
        // TODO: update the code to test the property comprehensiveIncomeNetOfTax
        expect(instance).to.have.property('comprehensiveIncomeNetOfTax');
        // expect(instance.comprehensiveIncomeNetOfTax).to.be(expectedValueLiteral);
      });

      it('should have the property ebit (base name: "ebit")', function() {
        // TODO: update the code to test the property ebit
        expect(instance).to.have.property('ebit');
        // expect(instance.ebit).to.be(expectedValueLiteral);
      });

      it('should have the property ebitda (base name: "ebitda")', function() {
        // TODO: update the code to test the property ebitda
        expect(instance).to.have.property('ebitda');
        // expect(instance.ebitda).to.be(expectedValueLiteral);
      });

      it('should have the property netIncome (base name: "netIncome")', function() {
        // TODO: update the code to test the property netIncome
        expect(instance).to.have.property('netIncome');
        // expect(instance.netIncome).to.be(expectedValueLiteral);
      });

      it('should have the property effectOfAccountingCharges (base name: "effectOfAccountingCharges")', function() {
        // TODO: update the code to test the property effectOfAccountingCharges
        expect(instance).to.have.property('effectOfAccountingCharges');
        // expect(instance.effectOfAccountingCharges).to.be(expectedValueLiteral);
      });

      it('should have the property taxProvision (base name: "taxProvision")', function() {
        // TODO: update the code to test the property taxProvision
        expect(instance).to.have.property('taxProvision');
        // expect(instance.taxProvision).to.be(expectedValueLiteral);
      });

      it('should have the property sellingAndMarketingExpenses (base name: "sellingAndMarketingExpenses")', function() {
        // TODO: update the code to test the property sellingAndMarketingExpenses
        expect(instance).to.have.property('sellingAndMarketingExpenses');
        // expect(instance.sellingAndMarketingExpenses).to.be(expectedValueLiteral);
      });

      it('should have the property extraordinaryItems (base name: "extraordinaryItems")', function() {
        // TODO: update the code to test the property extraordinaryItems
        expect(instance).to.have.property('extraordinaryItems');
        // expect(instance.extraordinaryItems).to.be(expectedValueLiteral);
      });

    });
  });

}));
