/*
 * Stocks
 * <h3>Authentication</h3>                     You need to authenticate to use this API.                     To authenticate click on the \"Authorize\" button and do one of the following steps.<br />                     1. Send your API key in the headers of the request by typing \"Bearer my-key\" on the Bearer authorization scheme.<br />                     2. Send your API key on the \"ApiKey\" query string parameter. To do this type your API key in the Query String authorization scheme.<br />                     Both methods are equally valid. We offer both options so that you can use the method that is easier to use in your application.<br />                     <br />                     <h3>API limits</h3>                     Your API key may be subject to daily/hourly limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)                       2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <h3>Suggestions</h3>                     You don't need to implement the whole API by hand in your programming language of choice.<br />                     Since this API has an OpenAPI specification you can use                      <a href=\"https://github.com/swagger-api/swagger-codegen\" target=\"_blank\">Swagger Generator</a>                      to automatically generate client stubs for more than 30 programming languages.                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>
 *
 * OpenAPI spec version: v1
 * Contact: equibles@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.32
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EquiblesCryptos);
  }
}(this, function(expect, EquiblesCryptos) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Performance', function() {
      beforeEach(function() {
        instance = new EquiblesCryptos.Performance();
      });

      it('should create an instance of Performance', function() {
        // TODO: update the code to test Performance
        expect(instance).to.be.a(EquiblesCryptos.Performance);
      });

      it('should have the property oneDay (base name: "oneDay")', function() {
        // TODO: update the code to test the property oneDay
        expect(instance).to.have.property('oneDay');
        // expect(instance.oneDay).to.be(expectedValueLiteral);
      });

      it('should have the property oneWeek (base name: "oneWeek")', function() {
        // TODO: update the code to test the property oneWeek
        expect(instance).to.have.property('oneWeek');
        // expect(instance.oneWeek).to.be(expectedValueLiteral);
      });

      it('should have the property twoWeeks (base name: "twoWeeks")', function() {
        // TODO: update the code to test the property twoWeeks
        expect(instance).to.have.property('twoWeeks');
        // expect(instance.twoWeeks).to.be(expectedValueLiteral);
      });

      it('should have the property oneMonth (base name: "oneMonth")', function() {
        // TODO: update the code to test the property oneMonth
        expect(instance).to.have.property('oneMonth');
        // expect(instance.oneMonth).to.be(expectedValueLiteral);
      });

      it('should have the property threeMonths (base name: "threeMonths")', function() {
        // TODO: update the code to test the property threeMonths
        expect(instance).to.have.property('threeMonths');
        // expect(instance.threeMonths).to.be(expectedValueLiteral);
      });

      it('should have the property sixMonths (base name: "sixMonths")', function() {
        // TODO: update the code to test the property sixMonths
        expect(instance).to.have.property('sixMonths');
        // expect(instance.sixMonths).to.be(expectedValueLiteral);
      });

      it('should have the property yearToDate (base name: "yearToDate")', function() {
        // TODO: update the code to test the property yearToDate
        expect(instance).to.have.property('yearToDate');
        // expect(instance.yearToDate).to.be(expectedValueLiteral);
      });

      it('should have the property oneYear (base name: "oneYear")', function() {
        // TODO: update the code to test the property oneYear
        expect(instance).to.have.property('oneYear');
        // expect(instance.oneYear).to.be(expectedValueLiteral);
      });

      it('should have the property twoYears (base name: "twoYears")', function() {
        // TODO: update the code to test the property twoYears
        expect(instance).to.have.property('twoYears');
        // expect(instance.twoYears).to.be(expectedValueLiteral);
      });

      it('should have the property twoYearsAnnualized (base name: "twoYearsAnnualized")', function() {
        // TODO: update the code to test the property twoYearsAnnualized
        expect(instance).to.have.property('twoYearsAnnualized');
        // expect(instance.twoYearsAnnualized).to.be(expectedValueLiteral);
      });

      it('should have the property threeYears (base name: "threeYears")', function() {
        // TODO: update the code to test the property threeYears
        expect(instance).to.have.property('threeYears');
        // expect(instance.threeYears).to.be(expectedValueLiteral);
      });

      it('should have the property threeYearsAnnualized (base name: "threeYearsAnnualized")', function() {
        // TODO: update the code to test the property threeYearsAnnualized
        expect(instance).to.have.property('threeYearsAnnualized');
        // expect(instance.threeYearsAnnualized).to.be(expectedValueLiteral);
      });

      it('should have the property fiveYears (base name: "fiveYears")', function() {
        // TODO: update the code to test the property fiveYears
        expect(instance).to.have.property('fiveYears');
        // expect(instance.fiveYears).to.be(expectedValueLiteral);
      });

      it('should have the property fiveYearsAnnualized (base name: "fiveYearsAnnualized")', function() {
        // TODO: update the code to test the property fiveYearsAnnualized
        expect(instance).to.have.property('fiveYearsAnnualized');
        // expect(instance.fiveYearsAnnualized).to.be(expectedValueLiteral);
      });

      it('should have the property tenYears (base name: "tenYears")', function() {
        // TODO: update the code to test the property tenYears
        expect(instance).to.have.property('tenYears');
        // expect(instance.tenYears).to.be(expectedValueLiteral);
      });

      it('should have the property tenYearsAnnualized (base name: "tenYearsAnnualized")', function() {
        // TODO: update the code to test the property tenYearsAnnualized
        expect(instance).to.have.property('tenYearsAnnualized');
        // expect(instance.tenYearsAnnualized).to.be(expectedValueLiteral);
      });

      it('should have the property twentyYears (base name: "twentyYears")', function() {
        // TODO: update the code to test the property twentyYears
        expect(instance).to.have.property('twentyYears');
        // expect(instance.twentyYears).to.be(expectedValueLiteral);
      });

      it('should have the property twentyYearsAnnualized (base name: "twentyYearsAnnualized")', function() {
        // TODO: update the code to test the property twentyYearsAnnualized
        expect(instance).to.have.property('twentyYearsAnnualized');
        // expect(instance.twentyYearsAnnualized).to.be(expectedValueLiteral);
      });

    });
  });

}));
